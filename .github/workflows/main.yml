name: Analyze and deploy
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
permissions:
  contents: read
jobs:
  analyze:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['8.1', '8.2']
    name: Analyzing for PHP ${{ matrix.php }}
    steps:
      - name: Stub for analyzing
        run: echo "Stub for analyzing"
#    - uses: actions/checkout@v3
#    - name: Install PHP
#      uses: shivammathur/setup-php@master
#      with:
#        php-version: ${{ matrix.php }}
#    - name: Report PHP version
#      run: php -v
#    - name: Security checker
#      uses: symfonycorp/security-checker-action@v4
#    - name: Validate composer.json and composer.lock
#      run: composer validate --strict
##    - name: Cache Composer packages
##      id: composer-cache
##      uses: actions/cache@v3
##      with:
##        path: vendor
##        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
##        restore-keys: |
##          ${{ runner.os }}-php-
#    - name: Install dependencies
#      run: composer install --prefer-dist --no-progress
#    - name: Code Sniffer
#      run: vendor/bin/phpcs
#    - name: Psalm
#      run: vendor/bin/psalm
#    - name: PHPStan
#      run: vendor/bin/phpstan
##    - name: Run test suite
##      run: vendor/bin/phpunit
  display-variables:
    name: ${{ vars.JOB_NAME }}
    # You can use configuration variables with the `vars` context for dynamic jobs
    if: ${{ vars.USE_VARIABLES == 'true' }}
    runs-on: ${{ vars.RUNNER }}
    environment: ${{ vars.ENVIRONMENT_STAGE }}
    steps:
      - name: Use variables
        run: |
          echo "repository variable : ${{ vars.REPOSITORY_VAR }}"
          echo "organization variable : ${{ vars.ORGANIZATION_VAR }}"
          echo "overridden variable : ${{ vars.OVERRIDE_VAR }}"
          echo "variable from shell environment : $env_var"

      - name: ${{ vars.HELLO_WORLD_STEP }}
        if: ${{ vars.HELLO_WORLD_ENABLED == 'true' }}
        uses: actions/hello-world-javascript-action@main
        with:
          who-to-greet: ${{ vars.GREET_NAME }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: analyze
    environment: ${{ vars.ENVIRONMENT_PRODUCTION }}
    steps:
      - name: Configure SSH
        env:
          SSH_KEY: ${{ secrets.PRIVATE_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
          SSH_HOST: ${{ vars.SERVER_NAME }}
          SSH_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          mkdir -p ~/.ssh/
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
            Host host_name
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/staging.key
              StrictHostKeyChecking no
          END
      - name: Cloning the project
        env:
          DB_DRIVER: ${{secrets.DB_DRIVER }}
          DB_USER: ${{secrets.DB_USER }}
          DB_PASSWORD: ${{secrets.DB_PASSWORD }}
          DB_NAME: ${{secrets.DB_NAME }}
          DB_HOST: ${{secrets.DB_HOST }}
          DB_PORT: ${{secrets.DB_PORT }}
          DB_DSN: ${{secrets.DB_DSN }}
          JWT_TOKEN_EXPIRATION_TIME: ${{secrets.JWT_TOKEN_EXPIRATION_TIME }}
          JWT_SECRET: ${{secrets.JWT_SECRET }}
        run: ssh ${{secrets.DEPLOY_USER }}@${{ vars.SERVER_NAME }} "sudo rm -rf /var/www/inventory_it &&
          cd /var/www &&
          git clone git@github.com:amarkhai/inventory_it.git inventory_it &&
          sudo chown www-data:www-data inventory_it -R &&
          cd inventory_it &&
          sh .deploy/deploy.sh"

